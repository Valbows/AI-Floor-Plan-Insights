version: '3.8'

services:
  # Redis - Message broker for Celery
  redis:
    image: redis:7-alpine
    container_name: ai-floorplan-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Flask API Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: ai-floorplan-backend
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    restart: unless-stopped

  # Celery Worker - Async AI agent processing
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    container_name: ai-floorplan-celery
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  # React Frontend (Development)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: ai-floorplan-frontend
    ports:
      - "5173:5173"
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent host node_modules override
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  backend_uploads:
    driver: local
