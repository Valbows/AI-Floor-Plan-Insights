const { test, expect } = require('@playwright/test');

/**
 * E2E Test: Market Insights Display
 * 
 * Tests that market insights generated by Agent #2 are correctly displayed
 * in the frontend PropertyDetail page.
 */

const BASE_URL = 'http://localhost:5173';
const API_URL = 'http://localhost:5000';

test.describe('Market Insights Display', () => {
  let authToken;
  let testPropertyId;

  test.beforeAll(async ({ request }) => {
    // Login and get auth token
    const loginResponse = await request.post(`${API_URL}/auth/login`, {
      data: {
        email: 'jane.smith@realestate.com',
        password: 'Agent2025!'
      }
    });

    expect(loginResponse.ok()).toBeTruthy();
    const loginData = await loginResponse.json();
    authToken = loginData.token;
    console.log('✅ Authenticated successfully');

    // Find a property with market insights
    const response = await request.get(`${API_URL}/api/properties`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    expect(response.ok()).toBeTruthy();
    const data = await response.json();
    const properties = data.properties;

    const propertyWithInsights = properties.find(prop => 
      prop.status === 'complete' && 
      prop.extracted_data?.market_insights
    );

    expect(propertyWithInsights).toBeDefined();
    testPropertyId = propertyWithInsights.id;
    
    console.log(`✅ Found property with market insights: ${propertyWithInsights.extracted_data.address}`);
    console.log(`   ID: ${testPropertyId}`);
    console.log(`   Price: $${propertyWithInsights.extracted_data.market_insights.price_estimate.estimated_value.toLocaleString()}`);
  });

  test('should display market insights in frontend', async ({ page }) => {
    // Set auth token in localStorage
    await page.goto(BASE_URL);
    await page.evaluate((token) => {
      localStorage.setItem('token', token);
    }, authToken);

    // Navigate to property detail page (FIX: use /properties/ not /property/)
    await page.goto(`${BASE_URL}/properties/${testPropertyId}`);

    // Wait for page to load
    await page.waitForLoadState('networkidle');

    // Verify we're on the property detail page
    await expect(page.getByRole('heading', { name: /Property Details/i }).first()).toBeVisible({ timeout: 10000 });

    // Click on Market Insights tab
    await page.getByText('Market Insights').click();

    // Wait a moment for content to render
    await page.waitForTimeout(1000);

    // Check for Price Estimate section
    await expect(page.getByText(/Price Estimate/i)).toBeVisible();
    
    // Check for dollar amount (should have $ and comma)
    const priceElement = page.locator('text=/\\$[0-9,]+/').first();
    await expect(priceElement).toBeVisible();
    const priceText = await priceElement.textContent();
    console.log(`✅ Price displayed: ${priceText}`);

    // Check for confidence badge
    await expect(page.locator('text=/confidence/i')).toBeVisible();

    // Check for Market Trend section
    await expect(page.getByText(/Market Trend/i)).toBeVisible();
    
    // Check for trend direction
    await expect(page.getByText(/Direction/i)).toBeVisible();

    // Check for Investment Analysis section
    await expect(page.getByText(/Investment Analysis/i)).toBeVisible();
    
    // Check for investment score
    await expect(page.getByText(/Investment Score/i)).toBeVisible();
    await expect(page.locator('text=/\\/100/')).toBeVisible();

    console.log('✅ All market insights sections displayed correctly');
  });

  test('should display marketing content tab', async ({ page }) => {
    // Set auth token
    await page.goto(BASE_URL);
    await page.evaluate((token) => {
      localStorage.setItem('token', token);
    }, authToken);

    // Navigate to property detail page (FIX: use /properties/ not /property/)
    await page.goto(`${BASE_URL}/properties/${testPropertyId}`);
    await page.waitForLoadState('networkidle');

    // Verify page loaded
    await expect(page.getByRole('heading', { name: /Property Details/i }).first()).toBeVisible();

    // Click on Marketing Content tab
    await page.getByText('Marketing Content').click();

    // Wait for content to render
    await page.waitForTimeout(1000);

    // Check for Listing Headline
    await expect(page.getByText(/Listing Headline/i)).toBeVisible();

    // Check for MLS Description
    await expect(page.getByText(/MLS Description/i)).toBeVisible();

    // Check for actual listing headline text (not empty)
    const headlineText = await page.locator('.text-xl.font-bold.text-blue-900').textContent();
    expect(headlineText).toBeTruthy();
    console.log(`   Headline: ${headlineText.substring(0, 50)}...`);

    console.log('✅ Marketing content displayed correctly');
  });

  test('should NOT display "Market insights are being analyzed..." for completed property', async ({ page }) => {
    // Set auth token
    await page.goto(BASE_URL);
    await page.evaluate((token) => {
      localStorage.setItem('token', token);
    }, authToken);

    // Navigate to property detail page (FIX: use /properties/ not /property/)
    await page.goto(`${BASE_URL}/properties/${testPropertyId}`);
    await page.waitForLoadState('networkidle');

    // Verify page loaded
    await expect(page.getByRole('heading', { name: /Property Details/i }).first()).toBeVisible();

    // Click on Market Insights tab
    await page.getByText('Market Insights').click();
    await page.waitForTimeout(1000);

    // Should NOT show loading message (updated text from Ariel-Branch)
    const loadingMessage = page.getByText(/Processing market insights/i);
    await expect(loadingMessage).not.toBeVisible();

    console.log('✅ No loading message displayed for completed property');
  });
});

test.describe('Property without Market Insights', () => {
  test('should show appropriate message for property without market insights', async ({ page, request }) => {
    // Login
    const loginResponse = await request.post(`${API_URL}/auth/login`, {
      data: {
        email: 'jane.smith@realestate.com',
        password: 'Agent2025!'
      }
    });

    const loginData = await loginResponse.json();
    const authToken = loginData.token;

    // Find a property without market insights (status enrichment_complete but no data)
    const propertiesResponse = await request.get(`${API_URL}/api/properties`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    });

    const data = await propertiesResponse.json();
    const incompleteProperty = data.properties.find(prop => 
      prop.status === 'enrichment_complete' && 
      !prop.extracted_data?.market_insights
    );

    if (incompleteProperty) {
      console.log(`Found incomplete property: ${incompleteProperty.id}`);
      
      // Navigate to property
      await page.goto(BASE_URL);
      await page.evaluate((token) => {
        localStorage.setItem('token', token);
      }, authToken);

      await page.goto(`${BASE_URL}/properties/${incompleteProperty.id}`);
      await page.waitForLoadState('networkidle');

      // Verify page loaded
      await expect(page.getByRole('heading', { name: /Property Details/i }).first()).toBeVisible();

      // Click Market Insights tab (use button role to avoid matching text in content)
      await page.getByRole('button', { name: 'Market Insights' }).click();
      await page.waitForTimeout(1000);

      // Should show "Processing market insights..." message (updated from Ariel-Branch)
      await expect(page.getByText(/Processing market insights/i)).toBeVisible();
      
      console.log('✅ Loading message displayed for incomplete property');
    } else {
      console.log('ℹ️  No incomplete properties found to test');
      test.skip();
    }
  });
});
